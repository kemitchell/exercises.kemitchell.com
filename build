#!/usr/bin/env node
import slugify from 'slugify'
import kemarkdown from 'kemarkdown'
import ejs from 'ejs'
import { readFileSync, statSync, unlinkSync, mkdirSync, writeFileSync } from 'fs'
import path from 'path'
import { globSync } from 'glob'
import yaml from 'js-yaml'

function readYAML (file) {
  return yaml.load(readFileSync(file), { schema: yaml.JSON_SCHEMA })
}

// Process exercises.
const exerciseFiles = globSync('data/exercises/*.yml')
const exercises = new Set()
const arrays = ['progressions', 'sources', 'regressions', 'muscles', 'joints', 'tags', 'references', 'alternatives', 'mistakes', 'synonyms']
let lastUpdated
for (const file of exerciseFiles) {
  const exercise = readYAML(file)
  const updated = exercise.updated = statSync(file).mtime
  if (lastUpdated === undefined) lastUpdated = updated
  else if (updated > lastUpdated) lastUpdated = updated
  exercise.slug = slugify(exercise.name)
  exercise.file = file
  for (const arrayKey of arrays) {
    if (exercise[arrayKey] === undefined) exercise[arrayKey] = []
  }
  exercises.add(exercise)
}

const tags = new Map()
const muscles = new Map()
const joints = new Map()
for (const exercise of exercises.values()) {
  function inherit (key) {
    if (typeof exercise[key] === 'string') {
      const from = Array.from(exercises).find(other => other.name === exercise[key])
      if (!from) {
        throw new Error(`${exercise.name} inherited ${key} from unknown exercise ${exercise[key]}`)
      }
      exercise[key] = from[key]
    }
  }
  inherit('muscles')
  inherit('joints')

  // Create regressions links.
  for (const progressionName of exercise.progressions) {
    const progression = Array.from(exercises).find(exercise => exercise.name === progressionName)
    if (!progression) {
      throw new Error(`${exercise.name} referenced unknown progression ${progressionName}`)
    }
    progression.regressions.push(exercise.name)
  }

  // Create alternatives links.
  for (const alternativeName of exercise.alternatives) {
    const alternative = Array.from(exercises).find(exercise => exercise.name === alternativeName)
    if (!alternative) {
      throw new Error(`${exercise.name} referenced unknown alternative ${alternativeName}`)
    }
    if (!alternative.alternatives.includes(exercise.name)) {
      alternative.alternatives.push(exercise.name)
    }
  }

  function indexBy (index, key) {
    for (const element of exercise[key]) {
      if (!index.has(element)) index.set(element, new Set())
      index.get(element).add(exercise.name)
    }
  }
  indexBy(muscles, 'muscles')
  indexBy(joints, 'joints')
  indexBy(tags, 'tags')
}

// Process sources.
const sourceFiles = globSync('data/sources/*.yml')
const sources = new Set()
for (const file of sourceFiles) {
  const source = readYAML(file)
  source.updated = statSync(file).mtime
  source.slug = slugify(source.source + ' ' + source.title.toLowerCase())
  source.file = file
  if (source.notes) source.notes = kemarkdown(source.notes)
  // Add to sources of exercises.
  for (const exerciseName of source.exercises) {
    const exercise = Array.from(exercises).find(exercise => exercise.name === exerciseName)
    if (exercise) exercise.sources.push(source)
    else {
      console.error(`Source ${source.title} references unknown exercise ${exerciseName}.`)
    }
  }
  sources.add(source)
}

const htmlFiles = []
  .concat(globSync(path.join('site', '*.html')))
  .concat(globSync(path.join('site', 'sources', '*.html')))
for (const htmlFile of htmlFiles) {
  unlinkSync(htmlFile)
}
mkdirSync(path.join('site', 'sources'), { recursive: true })

const templateFiles = globSync('templates/*.html')
const templates = {}
for (const templateFile of templateFiles) {
  const basename = path.basename(templateFile, '.html')
  templates[basename] = readFileSync(templateFile, 'utf8')
}
const views = ['./partials']

const helpers = { slugify, github: 'https://github.com/kemitchell/exercises.kemitchell.com' }
for (const exercise of exercises.values()) {
  const pagePath = path.join('site', `${exercise.slug}.html`)
  writeFile(pagePath, ejs.render(templates.exercise, Object.assign({ file: exercise.file }, helpers, exercise), { views }))
}

for (const source of sources.values()) {
  const pagePath = path.join('site', 'sources', `${source.slug}.html`)
  writeFile(pagePath, ejs.render(templates.source, Object.assign({ file: source.file }, helpers, source), { views }))
}

const indexFile = path.join('site', 'index.html')
writeFile(indexFile, ejs.render(templates.index, Object.assign({}, helpers, { exercises: Array.from(exercises).sort((a, b) => a.name.localeCompare(b.name)), updated: lastUpdated, muscles }), { views }))

const musclesFile = path.join('site', 'muscles.html')
writeFile(musclesFile, ejs.render(templates.muscles, Object.assign({}, helpers, { updated: lastUpdated, muscles }), { views }))

const jointsFile = path.join('site', 'joints.html')
writeFile(jointsFile, ejs.render(templates.joints, Object.assign({}, helpers, { updated: lastUpdated, joints }), { views }))

const tagsFile = path.join('site', 'tags.html')
writeFile(tagsFile, ejs.render(templates.tags, Object.assign({}, helpers, { updated: lastUpdated, tags }), { views }))

const redirects = readYAML('data/redirects.yml')
for (const redirect of redirects) {
  const fromSlug = slugify(redirect.from)
  const toSlug = slugify(redirect.to)
  const redirectFile = path.join('site', `${fromSlug}.html`)
  writeFile(redirectFile, ejs.render(templates.redirect, Object.assign({}, helpers, { url: `/${toSlug}`, name: redirect.to }), { views }))
}

function writeFile (file, text) {
  writeFileSync(file, text, { flag: 'wx' })
}
