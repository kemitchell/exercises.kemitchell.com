#!/usr/bin/env node
const slugify = require('slugify')
const ejs = require('ejs')
const fs = require('fs')
const path = require('path')
const glob = require('glob')
const yaml = require('js-yaml')

const exerciseFiles = glob.sync('data/exercises/*.yml')
const exercises = new Set()
const arrays = ['progressions', 'videos', 'regressions', 'muscles', 'tags', 'references', 'alternatives']
let lastUpdated
for (const file of exerciseFiles) {
  const exercise = yaml.load(fs.readFileSync(file, 'utf8'))
  const updated = exercise.updated = fs.statSync(file).mtime
  if (lastUpdated === undefined) lastUpdated = updated
  else if (updated > lastUpdated) lastUpdated = updated
  exercise.slug = slugify(exercise.name)
  for (const arrayKey of arrays) {
    if (exercise[arrayKey] === undefined) exercise[arrayKey] = []
  }
  exercises.add(exercise)
}

const tags = new Map()
const muscles = new Map()
for (const exercise of exercises.values()) {
  // Inherit muscles list from another exercise.
  if (typeof exercise.muscles === 'string') {
    const from = Array.from(exercises).find(other => other.name === exercise.muscles)
    if (!from) {
      throw new Error(`${exercise.name} inherited muscles from unknown exercise ${exercise.muscles}`)
    }
    exercise.muscles = from.muscles
  }

  // Create regressions links.
  for (const progressionName of exercise.progressions) {
    const progression = Array.from(exercises).find(exercise => exercise.name === progressionName)
    if (!progression) {
      throw new Error(`${exercise.name} referenced unknown progression ${progressionName}`)
    }
    progression.regressions.push(exercise.name)
  }

  // Create alternatives links.
  for (const alternativeName of exercise.alternatives) {
    const alternative = Array.from(exercises).find(exercise => exercise.name === alternativeName)
    if (!alternative) {
      throw new Error(`${exercise.name} referenced unknown alternative ${alternativeName}`)
    }
    if (!alternative.alternatives.includes(exercise.name)) {
      alternative.alternatives.push(exercise.name)
    }
  }


  // Index by muscles.
  for (const muscle of exercise.muscles) {
    if (!muscles.has(muscle)) muscles.set(muscle, new Set())
    muscles.get(muscle).add(exercise.name)
  }

  // Index by tags.
  for (const tag of exercise.tags) {
    if (!tags.has(tag)) tags.set(tag, new Set())
    tags.get(tag).add(exercise.name)
  }
}

const htmlFiles = glob.sync(path.join('site', '*.html'))
for (const htmlFile of htmlFiles) {
  fs.unlinkSync(htmlFile)
}

const templateFiles = glob.sync('templates/*.html')
const templates = {}
for (const templateFile of templateFiles) {
  const basename = path.basename(templateFile, '.html')
  templates[basename] = fs.readFileSync(templateFile, 'utf8')
}
const views = ['./partials']

const helpers = { slugify }
for (const exercise of exercises.values()) {
  const pagePath = path.join('site', `${exercise.slug}.html`)
  writeFile(pagePath, ejs.render(templates.exercise, Object.assign({}, helpers, exercise), { views }))
}

const indexFile = path.join('site', 'index.html')
writeFile(indexFile, ejs.render(templates.index, Object.assign({}, helpers, { exercises: Array.from(exercises).sort((a, b) => a.name.localeCompare(b.name)), updated: lastUpdated, muscles }), { views }))

const musclesFile = path.join('site', 'muscles.html')
writeFile(musclesFile, ejs.render(templates.muscles, Object.assign({}, helpers, { updated: lastUpdated, muscles }), { views }))

const tagsFile = path.join('site', 'tags.html')
writeFile(tagsFile, ejs.render(templates.tags, Object.assign({}, helpers, { updated: lastUpdated, tags }), { views }))

const redirects = yaml.load(fs.readFileSync('data/redirects.yml', 'utf8'))
for (const redirect of redirects) {
  const fromSlug = slugify(redirect.from)
  const toSlug = slugify(redirect.to)
  const redirectFile = path.join('site', `${fromSlug}.html`)
  writeFile(redirectFile, ejs.render(templates.redirect, Object.assign({}, helpers, { url: `/${toSlug}`, name: redirect.to }), { views }))
}

function writeFile (file, text) {
  fs.writeFileSync(file, text, { flag: 'wx' })
}
